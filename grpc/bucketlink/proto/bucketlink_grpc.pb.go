// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: bucketlink/proto/bucketlink.proto

package bucketlink

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BucketLink_ListBucketLinks_FullMethodName        = "/YrcfAgent.BucketLink/ListBucketLinks"
	BucketLink_AddBucketLink_FullMethodName          = "/YrcfAgent.BucketLink/AddBucketLink"
	BucketLink_DelBucketLink_FullMethodName          = "/YrcfAgent.BucketLink/DelBucketLink"
	BucketLink_ImportBucketLink_FullMethodName       = "/YrcfAgent.BucketLink/ImportBucketLink"
	BucketLink_ExportBucketLink_FullMethodName       = "/YrcfAgent.BucketLink/ExportBucketLink"
	BucketLink_StatBucketLink_FullMethodName         = "/YrcfAgent.BucketLink/StatBucketLink"
	BucketLink_BucketLinkSubscribeOps_FullMethodName = "/YrcfAgent.BucketLink/BucketLinkSubscribeOps"
	BucketLink_ShowBucketLinkHistory_FullMethodName  = "/YrcfAgent.BucketLink/ShowBucketLinkHistory"
	BucketLink_HotLayerCleanupOps_FullMethodName     = "/YrcfAgent.BucketLink/HotLayerCleanupOps"
)

// BucketLinkClient is the client API for BucketLink service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketLinkClient interface {
	ListBucketLinks(ctx context.Context, in *ListBucketLinksRequest, opts ...grpc.CallOption) (*ListBucketLinksResponse, error)
	AddBucketLink(ctx context.Context, in *AddBucketLinkRequest, opts ...grpc.CallOption) (*AddBucketLinkResponse, error)
	DelBucketLink(ctx context.Context, in *DelBucketLinkRequest, opts ...grpc.CallOption) (*DelBucketLinkResponse, error)
	ImportBucketLink(ctx context.Context, in *ImportBucketLinkRequest, opts ...grpc.CallOption) (*ImportBucketLinkResponse, error)
	ExportBucketLink(ctx context.Context, in *ExportBucketLinkRequest, opts ...grpc.CallOption) (*ExportBucketLinkResponse, error)
	StatBucketLink(ctx context.Context, in *StatBucketLinkRequest, opts ...grpc.CallOption) (*StatBucketLinkResponse, error)
	BucketLinkSubscribeOps(ctx context.Context, in *BucketLinkSubscribeOpsRequest, opts ...grpc.CallOption) (*BucketLinkSubscribeOpsResponse, error)
	ShowBucketLinkHistory(ctx context.Context, in *ShowBucketLinkHistoryRequest, opts ...grpc.CallOption) (*ShowBucketLinkHistoryResponse, error)
	HotLayerCleanupOps(ctx context.Context, in *HotLayerCleanupOpsRequest, opts ...grpc.CallOption) (*HotLayerCleanupOpsResponse, error)
}

type bucketLinkClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketLinkClient(cc grpc.ClientConnInterface) BucketLinkClient {
	return &bucketLinkClient{cc}
}

func (c *bucketLinkClient) ListBucketLinks(ctx context.Context, in *ListBucketLinksRequest, opts ...grpc.CallOption) (*ListBucketLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketLinksResponse)
	err := c.cc.Invoke(ctx, BucketLink_ListBucketLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketLinkClient) AddBucketLink(ctx context.Context, in *AddBucketLinkRequest, opts ...grpc.CallOption) (*AddBucketLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBucketLinkResponse)
	err := c.cc.Invoke(ctx, BucketLink_AddBucketLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketLinkClient) DelBucketLink(ctx context.Context, in *DelBucketLinkRequest, opts ...grpc.CallOption) (*DelBucketLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelBucketLinkResponse)
	err := c.cc.Invoke(ctx, BucketLink_DelBucketLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketLinkClient) ImportBucketLink(ctx context.Context, in *ImportBucketLinkRequest, opts ...grpc.CallOption) (*ImportBucketLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportBucketLinkResponse)
	err := c.cc.Invoke(ctx, BucketLink_ImportBucketLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketLinkClient) ExportBucketLink(ctx context.Context, in *ExportBucketLinkRequest, opts ...grpc.CallOption) (*ExportBucketLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportBucketLinkResponse)
	err := c.cc.Invoke(ctx, BucketLink_ExportBucketLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketLinkClient) StatBucketLink(ctx context.Context, in *StatBucketLinkRequest, opts ...grpc.CallOption) (*StatBucketLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatBucketLinkResponse)
	err := c.cc.Invoke(ctx, BucketLink_StatBucketLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketLinkClient) BucketLinkSubscribeOps(ctx context.Context, in *BucketLinkSubscribeOpsRequest, opts ...grpc.CallOption) (*BucketLinkSubscribeOpsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BucketLinkSubscribeOpsResponse)
	err := c.cc.Invoke(ctx, BucketLink_BucketLinkSubscribeOps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketLinkClient) ShowBucketLinkHistory(ctx context.Context, in *ShowBucketLinkHistoryRequest, opts ...grpc.CallOption) (*ShowBucketLinkHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowBucketLinkHistoryResponse)
	err := c.cc.Invoke(ctx, BucketLink_ShowBucketLinkHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketLinkClient) HotLayerCleanupOps(ctx context.Context, in *HotLayerCleanupOpsRequest, opts ...grpc.CallOption) (*HotLayerCleanupOpsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HotLayerCleanupOpsResponse)
	err := c.cc.Invoke(ctx, BucketLink_HotLayerCleanupOps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketLinkServer is the server API for BucketLink service.
// All implementations must embed UnimplementedBucketLinkServer
// for forward compatibility
type BucketLinkServer interface {
	ListBucketLinks(context.Context, *ListBucketLinksRequest) (*ListBucketLinksResponse, error)
	AddBucketLink(context.Context, *AddBucketLinkRequest) (*AddBucketLinkResponse, error)
	DelBucketLink(context.Context, *DelBucketLinkRequest) (*DelBucketLinkResponse, error)
	ImportBucketLink(context.Context, *ImportBucketLinkRequest) (*ImportBucketLinkResponse, error)
	ExportBucketLink(context.Context, *ExportBucketLinkRequest) (*ExportBucketLinkResponse, error)
	StatBucketLink(context.Context, *StatBucketLinkRequest) (*StatBucketLinkResponse, error)
	BucketLinkSubscribeOps(context.Context, *BucketLinkSubscribeOpsRequest) (*BucketLinkSubscribeOpsResponse, error)
	ShowBucketLinkHistory(context.Context, *ShowBucketLinkHistoryRequest) (*ShowBucketLinkHistoryResponse, error)
	HotLayerCleanupOps(context.Context, *HotLayerCleanupOpsRequest) (*HotLayerCleanupOpsResponse, error)
	mustEmbedUnimplementedBucketLinkServer()
}

// UnimplementedBucketLinkServer must be embedded to have forward compatible implementations.
type UnimplementedBucketLinkServer struct {
}

func (UnimplementedBucketLinkServer) ListBucketLinks(context.Context, *ListBucketLinksRequest) (*ListBucketLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucketLinks not implemented")
}
func (UnimplementedBucketLinkServer) AddBucketLink(context.Context, *AddBucketLinkRequest) (*AddBucketLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBucketLink not implemented")
}
func (UnimplementedBucketLinkServer) DelBucketLink(context.Context, *DelBucketLinkRequest) (*DelBucketLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBucketLink not implemented")
}
func (UnimplementedBucketLinkServer) ImportBucketLink(context.Context, *ImportBucketLinkRequest) (*ImportBucketLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportBucketLink not implemented")
}
func (UnimplementedBucketLinkServer) ExportBucketLink(context.Context, *ExportBucketLinkRequest) (*ExportBucketLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportBucketLink not implemented")
}
func (UnimplementedBucketLinkServer) StatBucketLink(context.Context, *StatBucketLinkRequest) (*StatBucketLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatBucketLink not implemented")
}
func (UnimplementedBucketLinkServer) BucketLinkSubscribeOps(context.Context, *BucketLinkSubscribeOpsRequest) (*BucketLinkSubscribeOpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BucketLinkSubscribeOps not implemented")
}
func (UnimplementedBucketLinkServer) ShowBucketLinkHistory(context.Context, *ShowBucketLinkHistoryRequest) (*ShowBucketLinkHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowBucketLinkHistory not implemented")
}
func (UnimplementedBucketLinkServer) HotLayerCleanupOps(context.Context, *HotLayerCleanupOpsRequest) (*HotLayerCleanupOpsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HotLayerCleanupOps not implemented")
}
func (UnimplementedBucketLinkServer) mustEmbedUnimplementedBucketLinkServer() {}

// UnsafeBucketLinkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketLinkServer will
// result in compilation errors.
type UnsafeBucketLinkServer interface {
	mustEmbedUnimplementedBucketLinkServer()
}

func RegisterBucketLinkServer(s grpc.ServiceRegistrar, srv BucketLinkServer) {
	s.RegisterService(&BucketLink_ServiceDesc, srv)
}

func _BucketLink_ListBucketLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLinkServer).ListBucketLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketLink_ListBucketLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLinkServer).ListBucketLinks(ctx, req.(*ListBucketLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketLink_AddBucketLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBucketLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLinkServer).AddBucketLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketLink_AddBucketLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLinkServer).AddBucketLink(ctx, req.(*AddBucketLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketLink_DelBucketLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBucketLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLinkServer).DelBucketLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketLink_DelBucketLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLinkServer).DelBucketLink(ctx, req.(*DelBucketLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketLink_ImportBucketLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportBucketLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLinkServer).ImportBucketLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketLink_ImportBucketLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLinkServer).ImportBucketLink(ctx, req.(*ImportBucketLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketLink_ExportBucketLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportBucketLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLinkServer).ExportBucketLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketLink_ExportBucketLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLinkServer).ExportBucketLink(ctx, req.(*ExportBucketLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketLink_StatBucketLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatBucketLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLinkServer).StatBucketLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketLink_StatBucketLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLinkServer).StatBucketLink(ctx, req.(*StatBucketLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketLink_BucketLinkSubscribeOps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BucketLinkSubscribeOpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLinkServer).BucketLinkSubscribeOps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketLink_BucketLinkSubscribeOps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLinkServer).BucketLinkSubscribeOps(ctx, req.(*BucketLinkSubscribeOpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketLink_ShowBucketLinkHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowBucketLinkHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLinkServer).ShowBucketLinkHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketLink_ShowBucketLinkHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLinkServer).ShowBucketLinkHistory(ctx, req.(*ShowBucketLinkHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketLink_HotLayerCleanupOps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HotLayerCleanupOpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketLinkServer).HotLayerCleanupOps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketLink_HotLayerCleanupOps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketLinkServer).HotLayerCleanupOps(ctx, req.(*HotLayerCleanupOpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BucketLink_ServiceDesc is the grpc.ServiceDesc for BucketLink service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BucketLink_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.BucketLink",
	HandlerType: (*BucketLinkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBucketLinks",
			Handler:    _BucketLink_ListBucketLinks_Handler,
		},
		{
			MethodName: "AddBucketLink",
			Handler:    _BucketLink_AddBucketLink_Handler,
		},
		{
			MethodName: "DelBucketLink",
			Handler:    _BucketLink_DelBucketLink_Handler,
		},
		{
			MethodName: "ImportBucketLink",
			Handler:    _BucketLink_ImportBucketLink_Handler,
		},
		{
			MethodName: "ExportBucketLink",
			Handler:    _BucketLink_ExportBucketLink_Handler,
		},
		{
			MethodName: "StatBucketLink",
			Handler:    _BucketLink_StatBucketLink_Handler,
		},
		{
			MethodName: "BucketLinkSubscribeOps",
			Handler:    _BucketLink_BucketLinkSubscribeOps_Handler,
		},
		{
			MethodName: "ShowBucketLinkHistory",
			Handler:    _BucketLink_ShowBucketLinkHistory_Handler,
		},
		{
			MethodName: "HotLayerCleanupOps",
			Handler:    _BucketLink_HotLayerCleanupOps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bucketlink/proto/bucketlink.proto",
}
