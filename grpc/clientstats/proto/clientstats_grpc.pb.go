// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: clientstats/proto/clientstats.proto

package clientstats

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ClientStats_MdsStats_FullMethodName = "/YrcfAgent.ClientStats/MdsStats"
	ClientStats_OssStats_FullMethodName = "/YrcfAgent.ClientStats/OssStats"
)

// ClientStatsClient is the client API for ClientStats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientStatsClient interface {
	MdsStats(ctx context.Context, in *ClientStatsRequest, opts ...grpc.CallOption) (*ClientStatsResponse, error)
	OssStats(ctx context.Context, in *ClientStatsRequest, opts ...grpc.CallOption) (*ClientStatsResponse, error)
}

type clientStatsClient struct {
	cc grpc.ClientConnInterface
}

func NewClientStatsClient(cc grpc.ClientConnInterface) ClientStatsClient {
	return &clientStatsClient{cc}
}

func (c *clientStatsClient) MdsStats(ctx context.Context, in *ClientStatsRequest, opts ...grpc.CallOption) (*ClientStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStatsResponse)
	err := c.cc.Invoke(ctx, ClientStats_MdsStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientStatsClient) OssStats(ctx context.Context, in *ClientStatsRequest, opts ...grpc.CallOption) (*ClientStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClientStatsResponse)
	err := c.cc.Invoke(ctx, ClientStats_OssStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientStatsServer is the server API for ClientStats service.
// All implementations must embed UnimplementedClientStatsServer
// for forward compatibility
type ClientStatsServer interface {
	MdsStats(context.Context, *ClientStatsRequest) (*ClientStatsResponse, error)
	OssStats(context.Context, *ClientStatsRequest) (*ClientStatsResponse, error)
	mustEmbedUnimplementedClientStatsServer()
}

// UnimplementedClientStatsServer must be embedded to have forward compatible implementations.
type UnimplementedClientStatsServer struct {
}

func (UnimplementedClientStatsServer) MdsStats(context.Context, *ClientStatsRequest) (*ClientStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MdsStats not implemented")
}
func (UnimplementedClientStatsServer) OssStats(context.Context, *ClientStatsRequest) (*ClientStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OssStats not implemented")
}
func (UnimplementedClientStatsServer) mustEmbedUnimplementedClientStatsServer() {}

// UnsafeClientStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientStatsServer will
// result in compilation errors.
type UnsafeClientStatsServer interface {
	mustEmbedUnimplementedClientStatsServer()
}

func RegisterClientStatsServer(s grpc.ServiceRegistrar, srv ClientStatsServer) {
	s.RegisterService(&ClientStats_ServiceDesc, srv)
}

func _ClientStats_MdsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientStatsServer).MdsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientStats_MdsStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientStatsServer).MdsStats(ctx, req.(*ClientStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientStats_OssStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientStatsServer).OssStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClientStats_OssStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientStatsServer).OssStats(ctx, req.(*ClientStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientStats_ServiceDesc is the grpc.ServiceDesc for ClientStats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientStats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.ClientStats",
	HandlerType: (*ClientStatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MdsStats",
			Handler:    _ClientStats_MdsStats_Handler,
		},
		{
			MethodName: "OssStats",
			Handler:    _ClientStats_OssStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clientstats/proto/clientstats.proto",
}
