// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: blockio/proto/blockio.proto

package blockio

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	BlockIO_ListBlockLinks_FullMethodName = "/YrcfAgent.BlockIO/ListBlockLinks"
	BlockIO_AddBlockLink_FullMethodName   = "/YrcfAgent.BlockIO/AddBlockLink"
	BlockIO_DelBlockLink_FullMethodName   = "/YrcfAgent.BlockIO/DelBlockLink"
)

// BlockIOClient is the client API for BlockIO service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockIOClient interface {
	ListBlockLinks(ctx context.Context, in *ListBlockLinksRequest, opts ...grpc.CallOption) (*ListBlockLinksResponse, error)
	AddBlockLink(ctx context.Context, in *AddBlockLinkRequest, opts ...grpc.CallOption) (*AddBlockLinkResponse, error)
	DelBlockLink(ctx context.Context, in *DelBlockLinkRequest, opts ...grpc.CallOption) (*DelBlockLinkResponse, error)
}

type blockIOClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockIOClient(cc grpc.ClientConnInterface) BlockIOClient {
	return &blockIOClient{cc}
}

func (c *blockIOClient) ListBlockLinks(ctx context.Context, in *ListBlockLinksRequest, opts ...grpc.CallOption) (*ListBlockLinksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlockLinksResponse)
	err := c.cc.Invoke(ctx, BlockIO_ListBlockLinks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockIOClient) AddBlockLink(ctx context.Context, in *AddBlockLinkRequest, opts ...grpc.CallOption) (*AddBlockLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBlockLinkResponse)
	err := c.cc.Invoke(ctx, BlockIO_AddBlockLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockIOClient) DelBlockLink(ctx context.Context, in *DelBlockLinkRequest, opts ...grpc.CallOption) (*DelBlockLinkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelBlockLinkResponse)
	err := c.cc.Invoke(ctx, BlockIO_DelBlockLink_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockIOServer is the server API for BlockIO service.
// All implementations must embed UnimplementedBlockIOServer
// for forward compatibility
type BlockIOServer interface {
	ListBlockLinks(context.Context, *ListBlockLinksRequest) (*ListBlockLinksResponse, error)
	AddBlockLink(context.Context, *AddBlockLinkRequest) (*AddBlockLinkResponse, error)
	DelBlockLink(context.Context, *DelBlockLinkRequest) (*DelBlockLinkResponse, error)
	mustEmbedUnimplementedBlockIOServer()
}

// UnimplementedBlockIOServer must be embedded to have forward compatible implementations.
type UnimplementedBlockIOServer struct {
}

func (UnimplementedBlockIOServer) ListBlockLinks(context.Context, *ListBlockLinksRequest) (*ListBlockLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlockLinks not implemented")
}
func (UnimplementedBlockIOServer) AddBlockLink(context.Context, *AddBlockLinkRequest) (*AddBlockLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlockLink not implemented")
}
func (UnimplementedBlockIOServer) DelBlockLink(context.Context, *DelBlockLinkRequest) (*DelBlockLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelBlockLink not implemented")
}
func (UnimplementedBlockIOServer) mustEmbedUnimplementedBlockIOServer() {}

// UnsafeBlockIOServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockIOServer will
// result in compilation errors.
type UnsafeBlockIOServer interface {
	mustEmbedUnimplementedBlockIOServer()
}

func RegisterBlockIOServer(s grpc.ServiceRegistrar, srv BlockIOServer) {
	s.RegisterService(&BlockIO_ServiceDesc, srv)
}

func _BlockIO_ListBlockLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlockLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockIOServer).ListBlockLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockIO_ListBlockLinks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockIOServer).ListBlockLinks(ctx, req.(*ListBlockLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockIO_AddBlockLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlockLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockIOServer).AddBlockLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockIO_AddBlockLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockIOServer).AddBlockLink(ctx, req.(*AddBlockLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockIO_DelBlockLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelBlockLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockIOServer).DelBlockLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BlockIO_DelBlockLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockIOServer).DelBlockLink(ctx, req.(*DelBlockLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockIO_ServiceDesc is the grpc.ServiceDesc for BlockIO service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockIO_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.BlockIO",
	HandlerType: (*BlockIOServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBlockLinks",
			Handler:    _BlockIO_ListBlockLinks_Handler,
		},
		{
			MethodName: "AddBlockLink",
			Handler:    _BlockIO_AddBlockLink_Handler,
		},
		{
			MethodName: "DelBlockLink",
			Handler:    _BlockIO_DelBlockLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blockio/proto/blockio.proto",
}
