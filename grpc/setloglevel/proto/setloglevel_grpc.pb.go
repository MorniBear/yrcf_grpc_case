//
//  This proto is used for setting log level in corresponding agent,
//  thus it is a developer tool while debugging.
//  Be noted, do not integrate this proto into your system for it may
//  be deleted in the future.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: setloglevel/proto/setloglevel.proto

package setloglevel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SetLogLevel_SetLogLevel_FullMethodName = "/YrcfAgent.SetLogLevel/SetLogLevel"
)

// SetLogLevelClient is the client API for SetLogLevel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SetLogLevelClient interface {
	SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error)
}

type setLogLevelClient struct {
	cc grpc.ClientConnInterface
}

func NewSetLogLevelClient(cc grpc.ClientConnInterface) SetLogLevelClient {
	return &setLogLevelClient{cc}
}

func (c *setLogLevelClient) SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLogLevelResponse)
	err := c.cc.Invoke(ctx, SetLogLevel_SetLogLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SetLogLevelServer is the server API for SetLogLevel service.
// All implementations must embed UnimplementedSetLogLevelServer
// for forward compatibility
type SetLogLevelServer interface {
	SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error)
	mustEmbedUnimplementedSetLogLevelServer()
}

// UnimplementedSetLogLevelServer must be embedded to have forward compatible implementations.
type UnimplementedSetLogLevelServer struct {
}

func (UnimplementedSetLogLevelServer) SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}
func (UnimplementedSetLogLevelServer) mustEmbedUnimplementedSetLogLevelServer() {}

// UnsafeSetLogLevelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SetLogLevelServer will
// result in compilation errors.
type UnsafeSetLogLevelServer interface {
	mustEmbedUnimplementedSetLogLevelServer()
}

func RegisterSetLogLevelServer(s grpc.ServiceRegistrar, srv SetLogLevelServer) {
	s.RegisterService(&SetLogLevel_ServiceDesc, srv)
}

func _SetLogLevel_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SetLogLevelServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SetLogLevel_SetLogLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SetLogLevelServer).SetLogLevel(ctx, req.(*SetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SetLogLevel_ServiceDesc is the grpc.ServiceDesc for SetLogLevel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SetLogLevel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.SetLogLevel",
	HandlerType: (*SetLogLevelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLogLevel",
			Handler:    _SetLogLevel_SetLogLevel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "setloglevel/proto/setloglevel.proto",
}
