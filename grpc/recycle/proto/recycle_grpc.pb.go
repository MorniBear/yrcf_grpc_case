// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: recycle/proto/recycle.proto

package recycle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Recycle_ListRecycle_FullMethodName          = "/YrcfAgent.Recycle/ListRecycle"
	Recycle_AddRecycle_FullMethodName           = "/YrcfAgent.Recycle/AddRecycle"
	Recycle_DeleteRecycle_FullMethodName        = "/YrcfAgent.Recycle/DeleteRecycle"
	Recycle_UpdateRecycle_FullMethodName        = "/YrcfAgent.Recycle/UpdateRecycle"
	Recycle_ListFilesInRecycle_FullMethodName   = "/YrcfAgent.Recycle/ListFilesInRecycle"
	Recycle_RecycleFile_FullMethodName          = "/YrcfAgent.Recycle/RecycleFile"
	Recycle_DeleteFile_FullMethodName           = "/YrcfAgent.Recycle/DeleteFile"
	Recycle_ShowHistoryOfRecycle_FullMethodName = "/YrcfAgent.Recycle/ShowHistoryOfRecycle"
	Recycle_StopMission_FullMethodName          = "/YrcfAgent.Recycle/StopMission"
)

// RecycleClient is the client API for Recycle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecycleClient interface {
	ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...grpc.CallOption) (*ListRecycleResponse, error)
	AddRecycle(ctx context.Context, in *AddRecycleRequest, opts ...grpc.CallOption) (*AddRecycleResponse, error)
	DeleteRecycle(ctx context.Context, in *DeleteRecycleRequest, opts ...grpc.CallOption) (*DeleteRecycleResponse, error)
	UpdateRecycle(ctx context.Context, in *UpdateRecycleRequest, opts ...grpc.CallOption) (*UpdateRecycleResponse, error)
	ListFilesInRecycle(ctx context.Context, in *ListFilesInRecycleRequest, opts ...grpc.CallOption) (*ListFilesInRecycleResponse, error)
	RecycleFile(ctx context.Context, in *RecycleFileRequest, opts ...grpc.CallOption) (*RecycleFileResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	ShowHistoryOfRecycle(ctx context.Context, in *ShowHistoryOfRecycleRequest, opts ...grpc.CallOption) (*ShowHistoryOfRecycleResponse, error)
	StopMission(ctx context.Context, in *StopMissionRequest, opts ...grpc.CallOption) (*StopMissionResponse, error)
}

type recycleClient struct {
	cc grpc.ClientConnInterface
}

func NewRecycleClient(cc grpc.ClientConnInterface) RecycleClient {
	return &recycleClient{cc}
}

func (c *recycleClient) ListRecycle(ctx context.Context, in *ListRecycleRequest, opts ...grpc.CallOption) (*ListRecycleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecycleResponse)
	err := c.cc.Invoke(ctx, Recycle_ListRecycle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recycleClient) AddRecycle(ctx context.Context, in *AddRecycleRequest, opts ...grpc.CallOption) (*AddRecycleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRecycleResponse)
	err := c.cc.Invoke(ctx, Recycle_AddRecycle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recycleClient) DeleteRecycle(ctx context.Context, in *DeleteRecycleRequest, opts ...grpc.CallOption) (*DeleteRecycleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRecycleResponse)
	err := c.cc.Invoke(ctx, Recycle_DeleteRecycle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recycleClient) UpdateRecycle(ctx context.Context, in *UpdateRecycleRequest, opts ...grpc.CallOption) (*UpdateRecycleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRecycleResponse)
	err := c.cc.Invoke(ctx, Recycle_UpdateRecycle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recycleClient) ListFilesInRecycle(ctx context.Context, in *ListFilesInRecycleRequest, opts ...grpc.CallOption) (*ListFilesInRecycleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesInRecycleResponse)
	err := c.cc.Invoke(ctx, Recycle_ListFilesInRecycle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recycleClient) RecycleFile(ctx context.Context, in *RecycleFileRequest, opts ...grpc.CallOption) (*RecycleFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecycleFileResponse)
	err := c.cc.Invoke(ctx, Recycle_RecycleFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recycleClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, Recycle_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recycleClient) ShowHistoryOfRecycle(ctx context.Context, in *ShowHistoryOfRecycleRequest, opts ...grpc.CallOption) (*ShowHistoryOfRecycleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShowHistoryOfRecycleResponse)
	err := c.cc.Invoke(ctx, Recycle_ShowHistoryOfRecycle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recycleClient) StopMission(ctx context.Context, in *StopMissionRequest, opts ...grpc.CallOption) (*StopMissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopMissionResponse)
	err := c.cc.Invoke(ctx, Recycle_StopMission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecycleServer is the server API for Recycle service.
// All implementations must embed UnimplementedRecycleServer
// for forward compatibility
type RecycleServer interface {
	ListRecycle(context.Context, *ListRecycleRequest) (*ListRecycleResponse, error)
	AddRecycle(context.Context, *AddRecycleRequest) (*AddRecycleResponse, error)
	DeleteRecycle(context.Context, *DeleteRecycleRequest) (*DeleteRecycleResponse, error)
	UpdateRecycle(context.Context, *UpdateRecycleRequest) (*UpdateRecycleResponse, error)
	ListFilesInRecycle(context.Context, *ListFilesInRecycleRequest) (*ListFilesInRecycleResponse, error)
	RecycleFile(context.Context, *RecycleFileRequest) (*RecycleFileResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	ShowHistoryOfRecycle(context.Context, *ShowHistoryOfRecycleRequest) (*ShowHistoryOfRecycleResponse, error)
	StopMission(context.Context, *StopMissionRequest) (*StopMissionResponse, error)
	mustEmbedUnimplementedRecycleServer()
}

// UnimplementedRecycleServer must be embedded to have forward compatible implementations.
type UnimplementedRecycleServer struct {
}

func (UnimplementedRecycleServer) ListRecycle(context.Context, *ListRecycleRequest) (*ListRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecycle not implemented")
}
func (UnimplementedRecycleServer) AddRecycle(context.Context, *AddRecycleRequest) (*AddRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRecycle not implemented")
}
func (UnimplementedRecycleServer) DeleteRecycle(context.Context, *DeleteRecycleRequest) (*DeleteRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecycle not implemented")
}
func (UnimplementedRecycleServer) UpdateRecycle(context.Context, *UpdateRecycleRequest) (*UpdateRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecycle not implemented")
}
func (UnimplementedRecycleServer) ListFilesInRecycle(context.Context, *ListFilesInRecycleRequest) (*ListFilesInRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilesInRecycle not implemented")
}
func (UnimplementedRecycleServer) RecycleFile(context.Context, *RecycleFileRequest) (*RecycleFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleFile not implemented")
}
func (UnimplementedRecycleServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedRecycleServer) ShowHistoryOfRecycle(context.Context, *ShowHistoryOfRecycleRequest) (*ShowHistoryOfRecycleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowHistoryOfRecycle not implemented")
}
func (UnimplementedRecycleServer) StopMission(context.Context, *StopMissionRequest) (*StopMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMission not implemented")
}
func (UnimplementedRecycleServer) mustEmbedUnimplementedRecycleServer() {}

// UnsafeRecycleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecycleServer will
// result in compilation errors.
type UnsafeRecycleServer interface {
	mustEmbedUnimplementedRecycleServer()
}

func RegisterRecycleServer(s grpc.ServiceRegistrar, srv RecycleServer) {
	s.RegisterService(&Recycle_ServiceDesc, srv)
}

func _Recycle_ListRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecycleServer).ListRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recycle_ListRecycle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecycleServer).ListRecycle(ctx, req.(*ListRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recycle_AddRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecycleServer).AddRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recycle_AddRecycle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecycleServer).AddRecycle(ctx, req.(*AddRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recycle_DeleteRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecycleServer).DeleteRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recycle_DeleteRecycle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecycleServer).DeleteRecycle(ctx, req.(*DeleteRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recycle_UpdateRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecycleServer).UpdateRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recycle_UpdateRecycle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecycleServer).UpdateRecycle(ctx, req.(*UpdateRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recycle_ListFilesInRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesInRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecycleServer).ListFilesInRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recycle_ListFilesInRecycle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecycleServer).ListFilesInRecycle(ctx, req.(*ListFilesInRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recycle_RecycleFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecycleFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecycleServer).RecycleFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recycle_RecycleFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecycleServer).RecycleFile(ctx, req.(*RecycleFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recycle_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecycleServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recycle_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecycleServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recycle_ShowHistoryOfRecycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowHistoryOfRecycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecycleServer).ShowHistoryOfRecycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recycle_ShowHistoryOfRecycle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecycleServer).ShowHistoryOfRecycle(ctx, req.(*ShowHistoryOfRecycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recycle_StopMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecycleServer).StopMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recycle_StopMission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecycleServer).StopMission(ctx, req.(*StopMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recycle_ServiceDesc is the grpc.ServiceDesc for Recycle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recycle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.Recycle",
	HandlerType: (*RecycleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRecycle",
			Handler:    _Recycle_ListRecycle_Handler,
		},
		{
			MethodName: "AddRecycle",
			Handler:    _Recycle_AddRecycle_Handler,
		},
		{
			MethodName: "DeleteRecycle",
			Handler:    _Recycle_DeleteRecycle_Handler,
		},
		{
			MethodName: "UpdateRecycle",
			Handler:    _Recycle_UpdateRecycle_Handler,
		},
		{
			MethodName: "ListFilesInRecycle",
			Handler:    _Recycle_ListFilesInRecycle_Handler,
		},
		{
			MethodName: "RecycleFile",
			Handler:    _Recycle_RecycleFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _Recycle_DeleteFile_Handler,
		},
		{
			MethodName: "ShowHistoryOfRecycle",
			Handler:    _Recycle_ShowHistoryOfRecycle_Handler,
		},
		{
			MethodName: "StopMission",
			Handler:    _Recycle_StopMission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recycle/proto/recycle.proto",
}
