// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: rename/proto/rename.proto

package rename

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Rename_Rename_FullMethodName = "/YrcfAgent.Rename/Rename"
)

// RenameClient is the client API for Rename service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RenameClient interface {
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
}

type renameClient struct {
	cc grpc.ClientConnInterface
}

func NewRenameClient(cc grpc.ClientConnInterface) RenameClient {
	return &renameClient{cc}
}

func (c *renameClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameResponse)
	err := c.cc.Invoke(ctx, Rename_Rename_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RenameServer is the server API for Rename service.
// All implementations must embed UnimplementedRenameServer
// for forward compatibility
type RenameServer interface {
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	mustEmbedUnimplementedRenameServer()
}

// UnimplementedRenameServer must be embedded to have forward compatible implementations.
type UnimplementedRenameServer struct {
}

func (UnimplementedRenameServer) Rename(context.Context, *RenameRequest) (*RenameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedRenameServer) mustEmbedUnimplementedRenameServer() {}

// UnsafeRenameServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RenameServer will
// result in compilation errors.
type UnsafeRenameServer interface {
	mustEmbedUnimplementedRenameServer()
}

func RegisterRenameServer(s grpc.ServiceRegistrar, srv RenameServer) {
	s.RegisterService(&Rename_ServiceDesc, srv)
}

func _Rename_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RenameServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Rename_Rename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RenameServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Rename_ServiceDesc is the grpc.ServiceDesc for Rename service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rename_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.Rename",
	HandlerType: (*RenameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Rename",
			Handler:    _Rename_Rename_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rename/proto/rename.proto",
}
