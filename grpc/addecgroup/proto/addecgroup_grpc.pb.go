// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: addecgroup/proto/addecgroup.proto

package addecgroup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AddECGroup_AddECGroup_FullMethodName = "/YrcfAgent.AddECGroup/AddECGroup"
)

// AddECGroupClient is the client API for AddECGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AddECGroupClient interface {
	AddECGroup(ctx context.Context, in *AddECGroupRequest, opts ...grpc.CallOption) (*AddECGroupResponse, error)
}

type addECGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewAddECGroupClient(cc grpc.ClientConnInterface) AddECGroupClient {
	return &addECGroupClient{cc}
}

func (c *addECGroupClient) AddECGroup(ctx context.Context, in *AddECGroupRequest, opts ...grpc.CallOption) (*AddECGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddECGroupResponse)
	err := c.cc.Invoke(ctx, AddECGroup_AddECGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AddECGroupServer is the server API for AddECGroup service.
// All implementations must embed UnimplementedAddECGroupServer
// for forward compatibility
type AddECGroupServer interface {
	AddECGroup(context.Context, *AddECGroupRequest) (*AddECGroupResponse, error)
	mustEmbedUnimplementedAddECGroupServer()
}

// UnimplementedAddECGroupServer must be embedded to have forward compatible implementations.
type UnimplementedAddECGroupServer struct {
}

func (UnimplementedAddECGroupServer) AddECGroup(context.Context, *AddECGroupRequest) (*AddECGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddECGroup not implemented")
}
func (UnimplementedAddECGroupServer) mustEmbedUnimplementedAddECGroupServer() {}

// UnsafeAddECGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AddECGroupServer will
// result in compilation errors.
type UnsafeAddECGroupServer interface {
	mustEmbedUnimplementedAddECGroupServer()
}

func RegisterAddECGroupServer(s grpc.ServiceRegistrar, srv AddECGroupServer) {
	s.RegisterService(&AddECGroup_ServiceDesc, srv)
}

func _AddECGroup_AddECGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddECGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AddECGroupServer).AddECGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AddECGroup_AddECGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AddECGroupServer).AddECGroup(ctx, req.(*AddECGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AddECGroup_ServiceDesc is the grpc.ServiceDesc for AddECGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AddECGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.AddECGroup",
	HandlerType: (*AddECGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddECGroup",
			Handler:    _AddECGroup_AddECGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "addecgroup/proto/addecgroup.proto",
}
