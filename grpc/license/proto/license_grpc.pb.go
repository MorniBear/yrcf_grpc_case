// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: license/proto/license.proto

package license

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	License_GetLicense_FullMethodName     = "/YrcfAgent.License/GetLicense"
	License_SetLicense_FullMethodName     = "/YrcfAgent.License/SetLicense"
	License_RequestLicense_FullMethodName = "/YrcfAgent.License/RequestLicense"
)

// LicenseClient is the client API for License service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LicenseClient interface {
	GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*GetLicenseResponse, error)
	SetLicense(ctx context.Context, in *SetLicenseRequest, opts ...grpc.CallOption) (*SetLicenseResponse, error)
	RequestLicense(ctx context.Context, in *RequestLicenseRequest, opts ...grpc.CallOption) (*RequestLicenseResponse, error)
}

type licenseClient struct {
	cc grpc.ClientConnInterface
}

func NewLicenseClient(cc grpc.ClientConnInterface) LicenseClient {
	return &licenseClient{cc}
}

func (c *licenseClient) GetLicense(ctx context.Context, in *GetLicenseRequest, opts ...grpc.CallOption) (*GetLicenseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLicenseResponse)
	err := c.cc.Invoke(ctx, License_GetLicense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) SetLicense(ctx context.Context, in *SetLicenseRequest, opts ...grpc.CallOption) (*SetLicenseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLicenseResponse)
	err := c.cc.Invoke(ctx, License_SetLicense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *licenseClient) RequestLicense(ctx context.Context, in *RequestLicenseRequest, opts ...grpc.CallOption) (*RequestLicenseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestLicenseResponse)
	err := c.cc.Invoke(ctx, License_RequestLicense_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LicenseServer is the server API for License service.
// All implementations must embed UnimplementedLicenseServer
// for forward compatibility
type LicenseServer interface {
	GetLicense(context.Context, *GetLicenseRequest) (*GetLicenseResponse, error)
	SetLicense(context.Context, *SetLicenseRequest) (*SetLicenseResponse, error)
	RequestLicense(context.Context, *RequestLicenseRequest) (*RequestLicenseResponse, error)
	mustEmbedUnimplementedLicenseServer()
}

// UnimplementedLicenseServer must be embedded to have forward compatible implementations.
type UnimplementedLicenseServer struct {
}

func (UnimplementedLicenseServer) GetLicense(context.Context, *GetLicenseRequest) (*GetLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (UnimplementedLicenseServer) SetLicense(context.Context, *SetLicenseRequest) (*SetLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLicense not implemented")
}
func (UnimplementedLicenseServer) RequestLicense(context.Context, *RequestLicenseRequest) (*RequestLicenseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestLicense not implemented")
}
func (UnimplementedLicenseServer) mustEmbedUnimplementedLicenseServer() {}

// UnsafeLicenseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LicenseServer will
// result in compilation errors.
type UnsafeLicenseServer interface {
	mustEmbedUnimplementedLicenseServer()
}

func RegisterLicenseServer(s grpc.ServiceRegistrar, srv LicenseServer) {
	s.RegisterService(&License_ServiceDesc, srv)
}

func _License_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: License_GetLicense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).GetLicense(ctx, req.(*GetLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_SetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).SetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: License_SetLicense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).SetLicense(ctx, req.(*SetLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _License_RequestLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LicenseServer).RequestLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: License_RequestLicense_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LicenseServer).RequestLicense(ctx, req.(*RequestLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// License_ServiceDesc is the grpc.ServiceDesc for License service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var License_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.License",
	HandlerType: (*LicenseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLicense",
			Handler:    _License_GetLicense_Handler,
		},
		{
			MethodName: "SetLicense",
			Handler:    _License_SetLicense_Handler,
		},
		{
			MethodName: "RequestLicense",
			Handler:    _License_RequestLicense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "license/proto/license.proto",
}
