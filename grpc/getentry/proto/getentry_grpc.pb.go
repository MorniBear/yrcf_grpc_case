// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: getentry/proto/getentry.proto

package getentry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GetEntry_GetEntry_FullMethodName = "/YrcfAgent.GetEntry/GetEntry"
)

// GetEntryClient is the client API for GetEntry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetEntryClient interface {
	GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error)
}

type getEntryClient struct {
	cc grpc.ClientConnInterface
}

func NewGetEntryClient(cc grpc.ClientConnInterface) GetEntryClient {
	return &getEntryClient{cc}
}

func (c *getEntryClient) GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntryResponse)
	err := c.cc.Invoke(ctx, GetEntry_GetEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetEntryServer is the server API for GetEntry service.
// All implementations must embed UnimplementedGetEntryServer
// for forward compatibility
type GetEntryServer interface {
	GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error)
	mustEmbedUnimplementedGetEntryServer()
}

// UnimplementedGetEntryServer must be embedded to have forward compatible implementations.
type UnimplementedGetEntryServer struct {
}

func (UnimplementedGetEntryServer) GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntry not implemented")
}
func (UnimplementedGetEntryServer) mustEmbedUnimplementedGetEntryServer() {}

// UnsafeGetEntryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetEntryServer will
// result in compilation errors.
type UnsafeGetEntryServer interface {
	mustEmbedUnimplementedGetEntryServer()
}

func RegisterGetEntryServer(s grpc.ServiceRegistrar, srv GetEntryServer) {
	s.RegisterService(&GetEntry_ServiceDesc, srv)
}

func _GetEntry_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetEntryServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetEntry_GetEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetEntryServer).GetEntry(ctx, req.(*GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetEntry_ServiceDesc is the grpc.ServiceDesc for GetEntry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetEntry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.GetEntry",
	HandlerType: (*GetEntryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntry",
			Handler:    _GetEntry_GetEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getentry/proto/getentry.proto",
}
