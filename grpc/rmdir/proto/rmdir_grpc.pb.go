// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: rmdir/proto/rmdir.proto

package rmdir

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	RmDir_RmDir_FullMethodName = "/YrcfAgent.RmDir/RmDir"
)

// RmDirClient is the client API for RmDir service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RmDirClient interface {
	RmDir(ctx context.Context, in *RmDirRequest, opts ...grpc.CallOption) (*RmDirResponse, error)
}

type rmDirClient struct {
	cc grpc.ClientConnInterface
}

func NewRmDirClient(cc grpc.ClientConnInterface) RmDirClient {
	return &rmDirClient{cc}
}

func (c *rmDirClient) RmDir(ctx context.Context, in *RmDirRequest, opts ...grpc.CallOption) (*RmDirResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RmDirResponse)
	err := c.cc.Invoke(ctx, RmDir_RmDir_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RmDirServer is the server API for RmDir service.
// All implementations must embed UnimplementedRmDirServer
// for forward compatibility
type RmDirServer interface {
	RmDir(context.Context, *RmDirRequest) (*RmDirResponse, error)
	mustEmbedUnimplementedRmDirServer()
}

// UnimplementedRmDirServer must be embedded to have forward compatible implementations.
type UnimplementedRmDirServer struct {
}

func (UnimplementedRmDirServer) RmDir(context.Context, *RmDirRequest) (*RmDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RmDir not implemented")
}
func (UnimplementedRmDirServer) mustEmbedUnimplementedRmDirServer() {}

// UnsafeRmDirServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RmDirServer will
// result in compilation errors.
type UnsafeRmDirServer interface {
	mustEmbedUnimplementedRmDirServer()
}

func RegisterRmDirServer(s grpc.ServiceRegistrar, srv RmDirServer) {
	s.RegisterService(&RmDir_ServiceDesc, srv)
}

func _RmDir_RmDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RmDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RmDirServer).RmDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RmDir_RmDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RmDirServer).RmDir(ctx, req.(*RmDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RmDir_ServiceDesc is the grpc.ServiceDesc for RmDir service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RmDir_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.RmDir",
	HandlerType: (*RmDirServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RmDir",
			Handler:    _RmDir_RmDir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rmdir/proto/rmdir.proto",
}
