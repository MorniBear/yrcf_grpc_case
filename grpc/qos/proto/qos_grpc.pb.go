// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: qos/proto/qos.proto

package qos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Qos_AddQos_FullMethodName    = "/YrcfAgent.Qos/AddQos"
	Qos_DeleteQos_FullMethodName = "/YrcfAgent.Qos/DeleteQos"
	Qos_ListQos_FullMethodName   = "/YrcfAgent.Qos/ListQos"
)

// QosClient is the client API for Qos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QosClient interface {
	AddQos(ctx context.Context, in *AddQosRequest, opts ...grpc.CallOption) (*AddQosResponse, error)
	DeleteQos(ctx context.Context, in *DeleteQosRequest, opts ...grpc.CallOption) (*DeleteQosResponse, error)
	ListQos(ctx context.Context, in *ListQosRequest, opts ...grpc.CallOption) (*ListQosResponse, error)
}

type qosClient struct {
	cc grpc.ClientConnInterface
}

func NewQosClient(cc grpc.ClientConnInterface) QosClient {
	return &qosClient{cc}
}

func (c *qosClient) AddQos(ctx context.Context, in *AddQosRequest, opts ...grpc.CallOption) (*AddQosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddQosResponse)
	err := c.cc.Invoke(ctx, Qos_AddQos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qosClient) DeleteQos(ctx context.Context, in *DeleteQosRequest, opts ...grpc.CallOption) (*DeleteQosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteQosResponse)
	err := c.cc.Invoke(ctx, Qos_DeleteQos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qosClient) ListQos(ctx context.Context, in *ListQosRequest, opts ...grpc.CallOption) (*ListQosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQosResponse)
	err := c.cc.Invoke(ctx, Qos_ListQos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QosServer is the server API for Qos service.
// All implementations must embed UnimplementedQosServer
// for forward compatibility
type QosServer interface {
	AddQos(context.Context, *AddQosRequest) (*AddQosResponse, error)
	DeleteQos(context.Context, *DeleteQosRequest) (*DeleteQosResponse, error)
	ListQos(context.Context, *ListQosRequest) (*ListQosResponse, error)
	mustEmbedUnimplementedQosServer()
}

// UnimplementedQosServer must be embedded to have forward compatible implementations.
type UnimplementedQosServer struct {
}

func (UnimplementedQosServer) AddQos(context.Context, *AddQosRequest) (*AddQosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQos not implemented")
}
func (UnimplementedQosServer) DeleteQos(context.Context, *DeleteQosRequest) (*DeleteQosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQos not implemented")
}
func (UnimplementedQosServer) ListQos(context.Context, *ListQosRequest) (*ListQosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQos not implemented")
}
func (UnimplementedQosServer) mustEmbedUnimplementedQosServer() {}

// UnsafeQosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QosServer will
// result in compilation errors.
type UnsafeQosServer interface {
	mustEmbedUnimplementedQosServer()
}

func RegisterQosServer(s grpc.ServiceRegistrar, srv QosServer) {
	s.RegisterService(&Qos_ServiceDesc, srv)
}

func _Qos_AddQos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QosServer).AddQos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Qos_AddQos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QosServer).AddQos(ctx, req.(*AddQosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qos_DeleteQos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QosServer).DeleteQos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Qos_DeleteQos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QosServer).DeleteQos(ctx, req.(*DeleteQosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Qos_ListQos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QosServer).ListQos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Qos_ListQos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QosServer).ListQos(ctx, req.(*ListQosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Qos_ServiceDesc is the grpc.ServiceDesc for Qos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Qos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.Qos",
	HandlerType: (*QosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddQos",
			Handler:    _Qos_AddQos_Handler,
		},
		{
			MethodName: "DeleteQos",
			Handler:    _Qos_DeleteQos_Handler,
		},
		{
			MethodName: "ListQos",
			Handler:    _Qos_ListQos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qos/proto/qos.proto",
}
