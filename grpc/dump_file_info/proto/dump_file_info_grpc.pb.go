// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: dump_file_info/proto/dump_file_info.proto

// If you want to make any modifications, please synchronize to the yrdi project

package dump_file_info

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DumpFileInfo_DumpFileInfo_FullMethodName = "/yrdi.DumpFileInfo/DumpFileInfo"
)

// DumpFileInfoClient is the client API for DumpFileInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DumpFileInfoClient interface {
	DumpFileInfo(ctx context.Context, in *DumpFileInfoRequest, opts ...grpc.CallOption) (*DumpFileInfoResponse, error)
}

type dumpFileInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewDumpFileInfoClient(cc grpc.ClientConnInterface) DumpFileInfoClient {
	return &dumpFileInfoClient{cc}
}

func (c *dumpFileInfoClient) DumpFileInfo(ctx context.Context, in *DumpFileInfoRequest, opts ...grpc.CallOption) (*DumpFileInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DumpFileInfoResponse)
	err := c.cc.Invoke(ctx, DumpFileInfo_DumpFileInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DumpFileInfoServer is the server API for DumpFileInfo service.
// All implementations must embed UnimplementedDumpFileInfoServer
// for forward compatibility
type DumpFileInfoServer interface {
	DumpFileInfo(context.Context, *DumpFileInfoRequest) (*DumpFileInfoResponse, error)
	mustEmbedUnimplementedDumpFileInfoServer()
}

// UnimplementedDumpFileInfoServer must be embedded to have forward compatible implementations.
type UnimplementedDumpFileInfoServer struct {
}

func (UnimplementedDumpFileInfoServer) DumpFileInfo(context.Context, *DumpFileInfoRequest) (*DumpFileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpFileInfo not implemented")
}
func (UnimplementedDumpFileInfoServer) mustEmbedUnimplementedDumpFileInfoServer() {}

// UnsafeDumpFileInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DumpFileInfoServer will
// result in compilation errors.
type UnsafeDumpFileInfoServer interface {
	mustEmbedUnimplementedDumpFileInfoServer()
}

func RegisterDumpFileInfoServer(s grpc.ServiceRegistrar, srv DumpFileInfoServer) {
	s.RegisterService(&DumpFileInfo_ServiceDesc, srv)
}

func _DumpFileInfo_DumpFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DumpFileInfoServer).DumpFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DumpFileInfo_DumpFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DumpFileInfoServer).DumpFileInfo(ctx, req.(*DumpFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DumpFileInfo_ServiceDesc is the grpc.ServiceDesc for DumpFileInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DumpFileInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yrdi.DumpFileInfo",
	HandlerType: (*DumpFileInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DumpFileInfo",
			Handler:    _DumpFileInfo_DumpFileInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dump_file_info/proto/dump_file_info.proto",
}
