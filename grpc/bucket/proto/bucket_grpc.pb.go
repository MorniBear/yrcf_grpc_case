// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: bucket/proto/bucket.proto

package bucket

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Bucket_ListBuckets_FullMethodName     = "/YrcfAgent.Bucket/ListBuckets"
	Bucket_ListBucketState_FullMethodName = "/YrcfAgent.Bucket/ListBucketState"
	Bucket_AddOrTestBucket_FullMethodName = "/YrcfAgent.Bucket/AddOrTestBucket"
	Bucket_UpdateBucket_FullMethodName    = "/YrcfAgent.Bucket/UpdateBucket"
	Bucket_DeleteBucket_FullMethodName    = "/YrcfAgent.Bucket/DeleteBucket"
)

// BucketClient is the client API for Bucket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BucketClient interface {
	ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error)
	ListBucketState(ctx context.Context, in *ListBucketStateRequest, opts ...grpc.CallOption) (*ListBucketStateResponse, error)
	AddOrTestBucket(ctx context.Context, in *AddOrTestBucketRequest, opts ...grpc.CallOption) (*AddOrTestBucketResponse, error)
	UpdateBucket(ctx context.Context, in *UpdateBucketRequest, opts ...grpc.CallOption) (*UpdateBucketResponse, error)
	DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error)
}

type bucketClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketClient(cc grpc.ClientConnInterface) BucketClient {
	return &bucketClient{cc}
}

func (c *bucketClient) ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketsResponse)
	err := c.cc.Invoke(ctx, Bucket_ListBuckets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) ListBucketState(ctx context.Context, in *ListBucketStateRequest, opts ...grpc.CallOption) (*ListBucketStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketStateResponse)
	err := c.cc.Invoke(ctx, Bucket_ListBucketState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) AddOrTestBucket(ctx context.Context, in *AddOrTestBucketRequest, opts ...grpc.CallOption) (*AddOrTestBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddOrTestBucketResponse)
	err := c.cc.Invoke(ctx, Bucket_AddOrTestBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) UpdateBucket(ctx context.Context, in *UpdateBucketRequest, opts ...grpc.CallOption) (*UpdateBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBucketResponse)
	err := c.cc.Invoke(ctx, Bucket_UpdateBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketClient) DeleteBucket(ctx context.Context, in *DeleteBucketRequest, opts ...grpc.CallOption) (*DeleteBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBucketResponse)
	err := c.cc.Invoke(ctx, Bucket_DeleteBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketServer is the server API for Bucket service.
// All implementations must embed UnimplementedBucketServer
// for forward compatibility
type BucketServer interface {
	ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error)
	ListBucketState(context.Context, *ListBucketStateRequest) (*ListBucketStateResponse, error)
	AddOrTestBucket(context.Context, *AddOrTestBucketRequest) (*AddOrTestBucketResponse, error)
	UpdateBucket(context.Context, *UpdateBucketRequest) (*UpdateBucketResponse, error)
	DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error)
	mustEmbedUnimplementedBucketServer()
}

// UnimplementedBucketServer must be embedded to have forward compatible implementations.
type UnimplementedBucketServer struct {
}

func (UnimplementedBucketServer) ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuckets not implemented")
}
func (UnimplementedBucketServer) ListBucketState(context.Context, *ListBucketStateRequest) (*ListBucketStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBucketState not implemented")
}
func (UnimplementedBucketServer) AddOrTestBucket(context.Context, *AddOrTestBucketRequest) (*AddOrTestBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrTestBucket not implemented")
}
func (UnimplementedBucketServer) UpdateBucket(context.Context, *UpdateBucketRequest) (*UpdateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBucket not implemented")
}
func (UnimplementedBucketServer) DeleteBucket(context.Context, *DeleteBucketRequest) (*DeleteBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBucket not implemented")
}
func (UnimplementedBucketServer) mustEmbedUnimplementedBucketServer() {}

// UnsafeBucketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketServer will
// result in compilation errors.
type UnsafeBucketServer interface {
	mustEmbedUnimplementedBucketServer()
}

func RegisterBucketServer(s grpc.ServiceRegistrar, srv BucketServer) {
	s.RegisterService(&Bucket_ServiceDesc, srv)
}

func _Bucket_ListBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).ListBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_ListBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).ListBuckets(ctx, req.(*ListBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_ListBucketState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).ListBucketState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_ListBucketState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).ListBucketState(ctx, req.(*ListBucketStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_AddOrTestBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddOrTestBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).AddOrTestBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_AddOrTestBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).AddOrTestBucket(ctx, req.(*AddOrTestBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_UpdateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).UpdateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_UpdateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).UpdateBucket(ctx, req.(*UpdateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bucket_DeleteBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServer).DeleteBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bucket_DeleteBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServer).DeleteBucket(ctx, req.(*DeleteBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bucket_ServiceDesc is the grpc.ServiceDesc for Bucket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bucket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YrcfAgent.Bucket",
	HandlerType: (*BucketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBuckets",
			Handler:    _Bucket_ListBuckets_Handler,
		},
		{
			MethodName: "ListBucketState",
			Handler:    _Bucket_ListBucketState_Handler,
		},
		{
			MethodName: "AddOrTestBucket",
			Handler:    _Bucket_AddOrTestBucket_Handler,
		},
		{
			MethodName: "UpdateBucket",
			Handler:    _Bucket_UpdateBucket_Handler,
		},
		{
			MethodName: "DeleteBucket",
			Handler:    _Bucket_DeleteBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bucket/proto/bucket.proto",
}
